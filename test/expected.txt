=================== test/11-func1.c ===================
0
1
2
3
4
5
6
7
8
9
=================== test/12-types1.c ===================
20
10
1
2
3
4
5
253
254
255
0
1
=================== test/13-func2.c ===================
10
-20
-10
-400
-520
=================== test/15-pointer1.c ===================
255
255
123457890
123457890
1234567890123
1234567890123
=================== test/16-global-var.c ===================
53
1234567890123
1234567890123
=================== test/17-scale-offset.c ===================
12
18
=================== test/18-lvalue-rvalue.c ===================
34
34
79
34
89
=================== test/19-array1.c ===================
=================== test/20-char-string.c ===================
hello world
=================== test/21-more-ops.c ===================
12
8
12
8
12
8

13
4
13
4
13
4

13
5
13
5
13
5

35
7
35
7
35
7

-43
100
-2
0
1
0
13
14
Hello world

2
59
57
8
7

Everything works! It's great!

=================== test/23-local-variable.c ===================
10
21
30
5
14
25
=================== test/24-function-param.c ===================
1
2
3
4
5
6
7
8
1
2
3
4
5
1
2
3
4
5
1
2
3
4
5
=================== test/25-function-call-args.c ===================
1
2
3
5
8
13
21
34
9
=================== test/26-prototypes.c ===================
// Our first special program. It cats itself!!!
/*
 * - no pre-processor, so put the prototypes manually
 * - can't accept char* argv[], so hard-code the file name
 *
 * - Not elegant, but progressive.
 */
int open(char *pathname, int flags);
int read(int fd, char *buf, int count);
int write(int fd, void *buf, int count);
int close(int fd);

char *buf;

int main() {
    int zin;
    int cnt;

    buf= "                                                             ";
    zin = open("test/26-prototypes.c", 0);
    if (zin == -1) {
        return (1);
    }
    while ((cnt = read(zin, buf, 60)) > 0) {
        write(1, buf, cnt);
    }
    close(zin);
    return (0);
}
