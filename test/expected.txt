=================== test/11-func1.c ===================
0
1
2
3
4
5
6
7
8
9
=================== test/12-types1.c ===================
20
10
1
2
3
4
5
253
254
255
0
1
=================== test/13-func2.c ===================
10
-20
-10
-400
-520
=================== test/15-pointer1.c ===================
255
255
123457890
123457890
1234567890123
1234567890123
=================== test/16-global-var.c ===================
53
1234567890123
1234567890123
=================== test/17-scale-offset.c ===================
12
18
=================== test/18-lvalue-rvalue.c ===================
34
34
79
34
89
=================== test/19-array1.c ===================
=================== test/20-char-string.c ===================
hello world
=================== test/21-more-ops.c ===================
12
8
12
8
12
8

13
4
13
4
13
4

13
5
13
5
13
5

35
7
35
7
35
7

-43
100
-2
0
1
0
13
14
Hello world

2
59
57
8
7

Everything works! It's great!

=================== test/23-local-variable.c ===================
10
21
30
5
14
25
=================== test/24-function-param.c ===================
1
2
3
4
5
6
7
8
1
2
3
4
5
1
2
3
4
5
1
2
3
4
5
=================== test/25-function-call-args.c ===================
1
2
3
5
8
13
21
34
9
=================== test/26-prototypes.c ===================
// Our first special program. It cats itself!!!
/*
 * - no pre-processor, so put the prototypes manually
 * - can't accept char* argv[], so hard-code the file name
 *
 * - Not elegant, but progressive.
 */
int open(char *pathname, int flags);
int read(int fd, char *buf, int count);
int write(int fd, void *buf, int count);
int close(int fd);

char *buf;

int main() {
    int zin;
    int cnt;

    buf= "                                                             ";
    zin = open("test/26-prototypes.c", 0);
    if (zin == -1) {
        return (1);
    }
    while ((cnt = read(zin, buf, 60)) > 0) {
        // 1 is stdout
        write(1, buf, cnt);
    }
    close(zin);
    return (0);
}
=================== test/29-double-pointers.c ===================
Hello world
Argument 0 is ./out
Argument 1 is abc
Argument 2 is def
Argument 3 is hello_abc
=================== test/31-struct1.c ===================
Please watch debug info...
=================== test/32-struct-access.c ===================
12345
A
78187493520
78187505930
78187481110
=================== test/33-union.c ===================
A
66
66
The next two depend on the endian of the platform
66
66
w is a
x is 97
y is 97
z is 97
=================== test/34-enum-typedef.c ===================
carrot is 3, pear is 10, mango is 12, sum is 25
par is 10, pech is 9, mago is 10, sum is 29

5
17
=================== test/35-pre-process.c ===================
x = 56
y = 134
=================== test/36-break-continue.c ===================
loop go on...
0
loop go on...
1
loop go on...
2
loop go on...
3
loop go on...
4
loop go on...
7
loop go on...
8
loop go on...
9
loop go on...
10
loop go on...
11
loop go on...
12
loop go on...
13
loop go on...
14
Done
=================== test/37-switch.c ===================
x = 0, y = 100
x = 1, y = 5
x = 2, y = 7
x = 3, y = 100
x = 4, y = 100
=================== test/38-dangling-else.c ===================
i = 2
i = 4
i = 6
i = 8
i = 10
i = 13
i = 16
i = 19
i = 22
finally, i = 23
for now, a = 20
a = 20
a = 21
a = 22
=================== test/39-declare-list.c ===================
b = 6
so in fred, x = 10 and y = 20
=================== test/40-global-var-array-init.c ===================
=================== test/41-local-var-init.c ===================
str = Hello world, x = 3, y = 5, z = 11
=================== test/42-casting-nullptr.c ===================
d = 255
e = -16
str f's value = 404048
=================== test/43-more-operators.c ===================
18
12
45
5
=================== test/44-fold-optimize.c ===================
2029
=================== test/45-global-init2.c ===================
array fred[3] = 16
enum a = 10, b = 12, c = -1
=================== test/46-void-func.c ===================
x = 74
ascii code: c = 34, d = 66
char code: c = ", d = B
=================== test/47-sizeof.c ===================
short x is -32768
char y is 128
size of char: 1
size of short: 2
size of int: 4
size of foo: 13
size of alias of foo: 13
size of baz(type is bar): 13
=================== test/48-static.c ===================
0
1
2
3
4
=================== test/49-ternary.c ===================
2
3
4
5
13
14
15
16
1000
1000
